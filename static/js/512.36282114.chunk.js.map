{"version":3,"file":"static/js/512.36282114.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nexport const TableWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport const TitleWrapper = styled.div`\n  margin-bottom: 30px;\n`;\n\nexport const Tagline = styled.p`\n  color: #adadad;\n`;\nexport const Table = styled.table`\n  margin-bottom: 30px;\n`;\nexport const Descr = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\nexport const Img = styled.img`\n  width: 300px;\n  height: auto;\n`;\n","import {\n  Wrapper,\n  TitleWrapper,\n  TableWrapper,\n  Tagline,\n  Table,\n  Descr,\n  Img,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ movie }) => {\n  const {\n    poster_path,\n    title,\n    tagline,\n    release_date,\n    genres,\n    production_countries,\n    original_title,\n    status,\n    vote_average,\n    overview,\n  } = movie;\n  const getYear = dateStr => {\n    if (dateStr) {\n      return dateStr.slice(0, 4);\n    }\n    return 'Unknown';\n  };\n  const getNames = arr => {\n    if (arr) {\n      return arr.map(item => item.name);\n    }\n    return 'No Data';\n  };\n  const NO_POSTER =\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1665px-No-Image-Placeholder.svg.png';\n  return (\n    <Wrapper>\n      <div>\n        <Img\n          src={\n            movie.poster_path === null\n              ? `${NO_POSTER}`\n              : `https://image.tmdb.org/t/p/w300/${poster_path}`\n          }\n          alt={title}\n        />\n      </div>\n      <TableWrapper>\n        <TitleWrapper>\n          <h1>{movie.title}</h1>\n          <Tagline>\n            <i>{tagline}</i>\n          </Tagline>\n        </TitleWrapper>\n        <Table>\n          <tbody>\n            <tr>\n              <td>Original:</td>\n              <td>{original_title}</td>\n            </tr>\n\n            <tr>\n              <td>Release:</td>\n              <td>{getYear(release_date)}</td>\n            </tr>\n            <tr>\n              <td>Genres:</td>\n              <td>{getNames(genres).join(', ')}</td>\n            </tr>\n            <tr>\n              <td>Country:</td>\n              <td>{getNames(production_countries).join(', ')}</td>\n            </tr>\n            <tr>\n              <td>Status:</td>\n              <td>{status}</td>\n            </tr>\n            <tr>\n              <td>Vote:</td>\n              <td>{vote_average}</td>\n            </tr>\n          </tbody>\n        </Table>\n        <Descr>Description:</Descr>\n        <p>{overview}</p>\n      </TableWrapper>\n    </Wrapper>\n  );\n};\nexport default MovieCard;\n","import styled from 'styled-components';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const Wrapper = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n`;\nexport const InfoTitle = styled.span`\n  display: block;\n  margin-bottom: 10px;\n`;\nexport const ListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const GoToLink = styled(NavLink)`\n  text-decoration: none;\n`;\nexport const GoBackLink = styled(Link)`\n  text-decoration: none;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 5px;\n  width: 150px;\n  border: 1px solid #212121;\n  border-radius: 5px;\n  padding: 5px 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  text-align: center;\n  &:hover {\n    border-color: #4490da;\n    background-color: #4490da;\n    color: #fff;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { GrLinkPrevious } from 'react-icons/gr';\n\nimport MovieCard from 'components/MovieCard';\n\nimport { Wrapper, ListItem, GoToLink, GoBackLink } from './MovieDetails.styled';\n\nimport { fetchMovieById } from 'services/api';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLink = location.state?.from || '/';\n\n  useEffect(() => {\n    if (!movieId) return;\n    async function getmovieById(movieId) {\n      try {\n        const result = await fetchMovieById(movieId);\n        setMovie(result);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getmovieById(movieId);\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <GoBackLink to={backLink}>\n        <GrLinkPrevious />\n        <span>Back to {backLink.includes('movies') ? 'Movies' : 'Home'}</span>\n      </GoBackLink>\n      {movie ? <MovieCard movie={movie} /> : 'Loading...'}\n      <ul>\n        <ListItem>\n          <GoToLink to={`cast`} state={{ from: backLink }}>\n            Cast\n          </GoToLink>\n        </ListItem>\n        <ListItem>\n          <GoToLink to={`reviews`} state={{ from: backLink }}>\n            Reviews\n          </GoToLink>\n        </ListItem>\n      </ul>\n      <Outlet />\n    </Wrapper>\n  );\n};\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '553cfa22e40cda1b81fd4b29995b0acb';\n\nexport async function fetchMovies(page) {\n  const response = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMoviesByQuery(query, page) {\n  const response = await axios.get(\n    `search/movie?query=${query}&api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","TableWrapper","_templateObject2","TitleWrapper","_templateObject3","Tagline","p","_templateObject4","Table","table","_templateObject5","Descr","_templateObject6","Img","img","_templateObject7","_ref","movie","poster_path","title","tagline","release_date","genres","production_countries","original_title","status","vote_average","overview","getNames","arr","map","item","name","_jsxs","children","_jsx","src","concat","alt","dateStr","slice","join","ListItem","span","li","GoToLink","NavLink","GoBackLink","Link","MovieDetails","_location$state","setMovie","useState","movieId","useParams","backLink","useLocation","state","from","useEffect","async","result","fetchMovieById","error","console","log","getmovieById","to","GrLinkPrevious","includes","MovieCard","Outlet","axios","defaults","baseURL","API_KEY","fetchMovies","page","get","data","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","query"],"sourceRoot":""}