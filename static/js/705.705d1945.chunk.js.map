{"version":3,"file":"static/js/705.705d1945.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","components/Pagination/Pagination.styled.js","components/Pagination/Pagination.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieCardLink = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const Movielist = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin: -10px;\n  padding: 20px;\n`;\nexport const ListItem = styled.li`\n  margin: 10px;\n  // width: 150px;\n  flex-basis: calc((100% - 10 * 15px) / 5);\n  padding: 5px;\n  background: #fff;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const MovieTitle = styled.p`\n  font-weight: 700;\n  color: #000;\n  margin-bottom: 5px;\n  padding: 5px;\n`;\n\nexport const MovieImage = styled.img`\n  width: 100%;\n  display: block;\n\n  object-fit: contain;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import { useLocation, useSearchParams } from 'react-router-dom';\n\nimport {\n  MovieCardLink,\n  ListItem,\n  MovieTitle,\n  MovieImage,\n} from './MoviesList.styled';\nconst NO_POSTER =\n  'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1665px-No-Image-Placeholder.svg.png';\n\nexport const MoviesListItem = ({ movie }) => {\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n\n  return (\n    <ListItem>\n      <MovieCardLink\n        to={`/movies/${movie.id}`}\n        state={{\n          from: location.pathname + location.search,\n          page: searchParams.get('page'),\n        }}\n      >\n        <MovieImage\n          src={\n            movie.poster_path === null\n              ? `${NO_POSTER}`\n              : `https://image.tmdb.org/t/p/w400/${movie.poster_path}`\n          }\n          alt={movie.title}\n          width=\"150\"\n        />\n        <MovieTitle>{movie.title}</MovieTitle>\n      </MovieCardLink>\n    </ListItem>\n  );\n};\n","import { MoviesListItem } from './MoviesListItem';\nimport { Movielist } from './MoviesList.styled';\n\nconst MoviesList = ({ moviesList, currentPage }) => {\n  return (\n    <Movielist>\n      {moviesList.map(movie => {\n        return (\n          <MoviesListItem\n            movie={movie}\n            key={movie.id}\n            currentPage={currentPage}\n          />\n        );\n      })}\n    </Movielist>\n  );\n};\nexport default MoviesList;\n","import styled from 'styled-components';\n\nexport const PaginationWrap = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n\nexport const PageBtn = styled.button`\n  border: none;\n  outline: none;\n  background-color: transparent;\n  &:hover {\n    background-color: #4490da;\n    color: #fff;\n  }\n`;\n\nexport const CtrlBtn = styled.button`\n  border: none;\n  outline: none;\n  background-color: transparent;\n`;\n","import { PaginationWrap, PageBtn } from './Pagination.styled';\n\nimport {\n  GrNext,\n  GrPrevious,\n  GrChapterNext,\n  GrChapterPrevious,\n} from 'react-icons/gr';\n\nconst Pagination = ({ currentPage, totalPages, onPageChange }) => {\n  const pageNumbers = [];\n  const maxPageButtons = 10;\n  let startPage, endPage;\n\n  if (totalPages <= maxPageButtons) {\n    // Less than maxPageButtons total pages so show all\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // More than maxPageButtons total pages so calculate start and end pages\n    const maxPagesBeforeCurrentPage = Math.floor(maxPageButtons / 2);\n    const maxPagesAfterCurrentPage = Math.ceil(maxPageButtons / 2) - 1;\n    if (currentPage <= maxPagesBeforeCurrentPage) {\n      // Near the start of the page range\n      startPage = 1;\n      endPage = maxPageButtons;\n    } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n      // Near the end of the page range\n      startPage = totalPages - maxPageButtons + 1;\n      endPage = totalPages;\n    } else {\n      // Somewhere in the middle\n      startPage = currentPage - maxPagesBeforeCurrentPage;\n      endPage = currentPage + maxPagesAfterCurrentPage;\n    }\n  }\n\n  for (let page = startPage; page <= endPage; page++) {\n    pageNumbers.push(page);\n  }\n\n  return (\n    <PaginationWrap>\n      {currentPage > 1 && (\n        <>\n          <PageBtn onClick={() => onPageChange(1)}>\n            <GrChapterPrevious />\n          </PageBtn>\n          <PageBtn onClick={() => onPageChange(currentPage - 1)}>\n            <GrPrevious />\n          </PageBtn>\n        </>\n      )}\n      {pageNumbers.map(page => (\n        <PageBtn\n          key={page}\n          disabled={page === currentPage}\n          className={`page-item ${page === currentPage ? 'active' : ''}`}\n          onClick={() => onPageChange(page)}\n        >\n          {page}\n        </PageBtn>\n      ))}\n      {currentPage < totalPages && (\n        <>\n          <PageBtn onClick={() => onPageChange(currentPage + 1)}>\n            <GrNext />\n          </PageBtn>\n          <PageBtn onClick={() => onPageChange(totalPages)}>\n            <GrChapterNext />\n          </PageBtn>\n        </>\n      )}\n    </PaginationWrap>\n  );\n};\n\nexport default Pagination;\n","import styled from 'styled-components';\n\nexport const HomeWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nimport { fetchMovies } from '../../services/api';\n\nimport MoviesList from 'components/MoviesList';\nimport Pagination from 'components/Pagination';\n\nimport { HomeWrapper } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  console.log(searchParams.get('page'));\n  const pageFromURL = parseInt(searchParams.get('page') || '1', 10);\n\n  useEffect(() => {\n    setPage(pageFromURL);\n  }, [pageFromURL]);\n\n  useEffect(() => {\n    async function getPopularMovies() {\n      try {\n        const result = await fetchMovies(pageFromURL);\n        const { results } = result;\n        setMovies([...results]);\n        const maxPagesAllowed = 500;\n        setTotalPages(Math.min(result.total_pages, maxPagesAllowed));\n      } catch (error) {\n        console.log(error);\n        Notiflix.Notify.failure('Something went wrong please try again later');\n      }\n    }\n    getPopularMovies();\n  }, [pageFromURL]);\n\n  const handlePageChange = newPage => {\n    setSearchParams({ page: newPage });\n  };\n  return (\n    <HomeWrapper>\n      <MoviesList moviesList={movies} currentPage={page} />\n      <Pagination\n        currentPage={page}\n        totalPages={totalPages}\n        onPageChange={handlePageChange}\n      />\n    </HomeWrapper>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '553cfa22e40cda1b81fd4b29995b0acb';\n\nexport async function fetchMovies(page) {\n  const response = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMoviesByQuery(query, page) {\n  const response = await axios.get(\n    `search/movie?query=${query}&api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n"],"names":["MovieCardLink","styled","Link","_templateObject","_taggedTemplateLiteral","Movielist","ul","_templateObject2","ListItem","li","_templateObject3","MovieTitle","p","_templateObject4","MovieImage","img","_templateObject5","MoviesListItem","_ref","movie","location","useLocation","searchParams","useSearchParams","_jsx","children","_jsxs","to","concat","id","state","from","pathname","search","page","get","src","poster_path","alt","title","width","moviesList","currentPage","map","PaginationWrap","div","PageBtn","button","totalPages","onPageChange","pageNumbers","startPage","endPage","maxPagesBeforeCurrentPage","Math","floor","maxPageButtons","maxPagesAfterCurrentPage","ceil","push","_Fragment","onClick","GrChapterPrevious","GrPrevious","disabled","className","GrNext","GrChapterNext","HomeWrapper","Home","movies","setMovies","useState","setPage","setTotalPages","setSearchParams","console","log","pageFromURL","parseInt","useEffect","async","result","fetchMovies","results","maxPagesAllowed","min","total_pages","error","Notiflix","failure","getPopularMovies","MoviesList","Pagination","newPage","axios","defaults","baseURL","API_KEY","data","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","query"],"sourceRoot":""}