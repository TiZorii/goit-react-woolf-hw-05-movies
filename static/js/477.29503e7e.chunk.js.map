{"version":3,"file":"static/js/477.29503e7e.chunk.js","mappings":"4OAEO,MAAMA,EAAWC,EAAAA,GAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iKAUpBC,EAAaJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kCAGtBI,EAAaP,EAAAA,GAAOC,GAAEO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,gEAKtBM,EAAST,EAAAA,GAAOU,KAAIC,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,+BAGpBS,EAAWZ,EAAAA,GAAOU,KAAIG,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,+BAGtBW,EAAgBd,EAAAA,GAAOe,IAAGC,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,wM,aCbvC,MAoDA,EApDqBc,KACnB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IACvC,IAAI,QAAEC,IAAYC,EAAAA,EAAAA,MAElBC,EAAAA,EAAAA,YAAU,KACRC,EAAgBH,EAAQ,GACvB,CAACA,IAEJ,MAAMG,EAAkBC,UACtB,IACE,MAAMP,QAAgBQ,EAAAA,EAAAA,IAAkBL,GACxC,GAA+B,IAA3BH,EAAQS,QAAQC,OAClB,MAAM,IAAIC,MAEZV,EAAWD,EAAQS,QACrB,CAAE,MAAOG,GACPC,QAAQC,IAAIF,GACZG,IAAAA,OAAgBC,QAAQ,0CAC1B,GAGF,OAA0B,IAAnBhB,EAAQU,QACbO,EAAAA,EAAAA,KAACrB,EAAa,CAAAsB,UACZD,EAAAA,EAAAA,KAAA,KAAAC,SAAG,iDAGLD,EAAAA,EAAAA,KAAA,MAAAC,SACGlB,EAAQmB,KAAIC,IAA0C,IAAzC,OAAEC,EAAM,QAAEC,EAAO,WAAEC,EAAU,GAAEC,GAAIJ,EAC3CK,EAAOF,EAAWG,OAAO,EAAG,IAC5BC,EAAOJ,EAAWG,OAAO,GAAI,GACjC,OACEE,EAAAA,EAAAA,MAAC/C,EAAQ,CAAAqC,SAAA,EACPU,EAAAA,EAAAA,MAAC1C,EAAU,CAAAgC,SAAA,EACTD,EAAAA,EAAAA,KAAC5B,EAAU,CAAA6B,UACTD,EAAAA,EAAAA,KAAC1B,EAAM,CAAA2B,SAAEG,OAEXO,EAAAA,EAAAA,MAACvC,EAAU,CAAA6B,SAAA,CAAC,UACJD,EAAAA,EAAAA,KAACvB,EAAQ,CAAAwB,SAAEO,QAEnBG,EAAAA,EAAAA,MAACvC,EAAU,CAAA6B,SAAA,CAAC,UACJD,EAAAA,EAAAA,KAACvB,EAAQ,CAAAwB,SAAES,WAGrBV,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,KAAAC,SAAII,QAbOE,EAeJ,KAIlB,C,mFC7DHK,EAAAA,EAAMC,SAASC,QAAU,gCACzB,MAAMC,EAAU,mCAETzB,eAAe0B,EAAYC,GAIhC,aAHuBL,EAAAA,EAAMM,IAAI,8BAADC,OACAJ,EAAO,yBAAAI,OAAwBF,KAE/CG,IAClB,CAEO9B,eAAe+B,EAAenC,GAInC,aAHuB0B,EAAAA,EAAMM,IAAI,SAADC,OACrBjC,EAAO,aAAAiC,OAAYJ,EAAO,qBAErBK,IAClB,CACO9B,eAAegC,EAAepC,GAInC,aAHuB0B,EAAAA,EAAMM,IAAI,SAADC,OACrBjC,EAAO,qBAAAiC,OAAoBJ,EAAO,qBAE7BK,IAClB,CACO9B,eAAeC,EAAkBL,GAItC,aAHuB0B,EAAAA,EAAMM,IAAI,SAADC,OACrBjC,EAAO,qBAAAiC,OAAoBJ,EAAO,qBAE7BK,IAClB,CACO9B,eAAeiC,EAAmBC,EAAOP,GAI9C,aAHuBL,EAAAA,EAAMM,IAAI,sBAADC,OACRK,EAAK,aAAAL,OAAYJ,EAAO,yBAAAI,OAAwBF,KAExDG,IAClB,C","sources":["components/MovieReviews/MovieReviews.styled.js","components/MovieReviews/MovieReviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  border-bottom: 1px solid black;\n  padding: 5px;\n  background: #fff;\n  margin-top: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const ReviewList = styled.ul`\n  margin-bottom: 20px;\n`;\nexport const ReviewItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\nexport const Author = styled.span`\n  font-weight: 700;\n`;\nexport const DateTime = styled.span`\n  font-weight: 500;\n`;\nexport const NoReviewsWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  border: 1px solid #212121;\n  border-radius: 5px;\n  padding: 30px 0;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/api';\nimport Notiflix from 'notiflix';\nimport {\n  ListItem,\n  Author,\n  DateTime,\n  ReviewItem,\n  ReviewList,\n  NoReviewsWrap,\n} from './MovieReviews.styled';\n\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieId);\n  }, [movieId]);\n\n  const getMovieReviews = async movieId => {\n    try {\n      const reviews = await fetchMovieReviews(movieId);\n      if (reviews.results.length === 0) {\n        throw new Error();\n      }\n      setReviews(reviews.results);\n    } catch (error) {\n      console.log(error);\n      Notiflix.Notify.failure('There are no reviews for this movie yet');\n    }\n  };\n\n  return reviews.length === 0 ? (\n    <NoReviewsWrap>\n      <p>'There are no reviews for this movie yet'</p>\n    </NoReviewsWrap>\n  ) : (\n    <ul>\n      {reviews.map(({ author, content, created_at, id }) => {\n        let date = created_at.substr(0, 10);\n        let time = created_at.substr(11, 5);\n        return (\n          <ListItem key={id}>\n            <ReviewList>\n              <ReviewItem>\n                <Author>{author}</Author>\n              </ReviewItem>\n              <ReviewItem>\n                Date: <DateTime>{date}</DateTime>\n              </ReviewItem>\n              <ReviewItem>\n                Time: <DateTime>{time}</DateTime>\n              </ReviewItem>\n            </ReviewList>\n            <div>\n              <p>{content}</p>\n            </div>\n          </ListItem>\n        );\n      })}\n    </ul>\n  );\n};\nexport default MovieReviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '553cfa22e40cda1b81fd4b29995b0acb';\n\nexport async function fetchMovies(page) {\n  const response = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\nexport async function fetchMoviesByQuery(query, page) {\n  const response = await axios.get(\n    `search/movie?query=${query}&api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n  return response.data;\n}\n"],"names":["ListItem","styled","li","_templateObject","_taggedTemplateLiteral","ReviewList","ul","_templateObject2","ReviewItem","_templateObject3","Author","span","_templateObject4","DateTime","_templateObject5","NoReviewsWrap","div","_templateObject6","MovieReviews","reviews","setReviews","useState","movieId","useParams","useEffect","getMovieReviews","async","fetchMovieReviews","results","length","Error","error","console","log","Notiflix","failure","_jsx","children","map","_ref","author","content","created_at","id","date","substr","time","_jsxs","axios","defaults","baseURL","API_KEY","fetchMovies","page","get","concat","data","fetchMovieById","fetchMovieCast","fetchMoviesByQuery","query"],"sourceRoot":""}